#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Apr  3 19:19:42 2018

"""
from bs4 import BeautifulSoup as BS
import requests
import numpy as np
import webbrowser

def JP_parsing(url = 'http://jobs.jpmorganchase.com/ListJobs/All/search/state/ny/country/us/city/new-york/sortdesc-postedon'):
    # url = 'http://jobs.jpmorganchase.com/ListJobs/All/search/state/ny/country/us/city/new-york/sortdesc-postedon'
    #http://jobs.jpmorganchase.com/ListJobs/All/search/state/ny/country/us/city/new-york/sortdesc-postedon/page-2
    
    response = requests.get(url)
    soup = BS(response.content, 'html.parser')
    
    ors = soup.find_all('td', {'class':'coldisplayjobid'})
    ors_Date = soup.find_all('td', {'class':'colpostedon'})

    Post_Date = [x.text[2:].strip() for x in ors_Date]
    Job_Name = [x.find('a').get('href').split('/')[4] for x in ors]

    assert len(Post_Date) == len(Job_Name)
    # 1
    Date = np.array(Post_Date)
    JobName = np.array(Job_Name)
    
    return ors, Date, JobName


def open_JD(JobName_List, jname, orig_nmlist):
    
    Webf = 'http://jobs.jpmorganchase.com'
    t = np.where(JobName_List==jname)[0][0]
    Job_link = Webf + str(orig_nmlist[t].find('a').get('href'))
    webbrowser.open_new_tab(Job_link)
    

def job_count(JobName_List, npdatalist, toDate):
    return len(JobName_List[npdatalist == toDate])


Orgwb = 'http://jobs.jpmorganchase.com/ListJobs/All/search/state/ny/country/us/city/new-york/sortdesc-postedon/page-'

N = 20
O1 = J1 = D1 = np.empty([1], dtype = str)


for _ in range(1, N):
    wbsite = Orgwb + str(_)
    Orglist, Datelist, Namelist = JP_parsing(wbsite)
    D1 = np.concatenate((D1, Datelist))
    J1 = np.concatenate((J1, Namelist))
    #O1 = np.concatenate((O1, Orglist))

for i in range(0, len(J1)-1):
    print(D1[i], ': ', J1[i])

for n in range(3, 10):
    today = '4-' + str(n) + '-2018'
    print(today, ': Total number of Job posted is', job_count(J1, D1, today), '!')


# open_JD(J1, 'Mobile-QA-Analyst', O1)


import datetime
Td = datetime.date.today()
back_N = 10

def Day_list(Nday):
    Td = datetime.date.today()
    daylist=[]
    for i in range(0,Nday+1):
        Org_D = Td-datetime.timedelta(i)
        m, d, y = Org_D.month, Org_D.day, Org_D.year
        Fmt_D = str(m) + '-' + str(d) + '-' + str(y)
        daylist.append(Fmt_D)
    return daylist



for n in Day_list(50):
    print(n, ': Total number of Job posted is', job_count(J1, D1, n), '!')


#single page testing:
    
a, b, c= JP_parsing()
open_JD(c, 'Mobile-QA-Analyst', a)     #test 'Mobile-QA-Analyst'

Day = '4-8-2018'
print(Day, ': Total number of Job is', job_count(c, b, Day), '!')

    


'''
# 2
for i in range(0, len(Job_Name)-1):
    print(Post_Date[i], ': ', Job_Name[i])

x = [i=='4-6-2018' for i in Post_Date]

y = []
for i in range(0, len(Job_Name)-1):
    if x[i]:
        y.append(Job_Name[i])
'''

#Job_map = {}
#for i in range(0,len(Jobor_link)-1):
#    Job_map[ors_Date[i].text[2:]] = Jobor_link[i].split('/')[4]  # key is not unique





'''
ors = soup.find_all('tr')
Jobor_link = [x.get('href') for x in ors]
#Jobor_title = [x.text for x in ors]

x = [x for x in ors if x.get('href')[1]=='S']
'''
